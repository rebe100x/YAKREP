<!doctype html><html><head><meta charset="utf-8" /><title>YAKWALA BATCH</title></head><body>
<?php 
/* Access Exalead index in GET, and return a JSON object
 * 
 * if an location is detected by EXALEAD, we apply a logical process to find out the more significant address
 * The input from Exalead has the following facets : all are ARRAYS (more than one location can be detected in the news)
 
 
 When we fetch data from XL, we have 2 types of results : DATA( fetch as GROUP in the foreach ) and FACETS ( fetch ad META in the foreach ) 
 $metas = $hit->metas;
 $groups = $hit->groups;
 
 Both data are described below :
 
 =============================================================== DATA INPUT DESCRIPTION ( GROUPS )===================================================================================================================
 
		
 -> INPUT DATA : 
item_title : title mapped in the parsing
item_desc : content mapped in the parsing
title : title detected by XL
text : text detected by XL
item_date : publication date mapped in the parsing
item_eventdate : event date mapped in the parsing
publicurl : external url mapped in the parsing
image_enclosure : thumb mapped in the parsing
item_geolocation : geolaction : lat,lng or lat#lng mapped in the parsing
item_latitude : latitude mapped in the parsing
item_longitude : longitude mapped in the parsing
item_address : string address mapped in the parsing
item_yakcat : list of yakcat IDs mapped in the parsing
item_place : name of the place mapped in the parsing
item_freetag: tags ( separation , ) mapped in the parsing
item_tel : tel number mapped in the parsing
item_mobile : mobile mapped in the parsing
item_mail: mail mapped in the parsing
item_transportation: transportation information mapped in the parsing
item_web: website url mapped in the parsing
item_opening: opening hoirs mapped in the parsing
				
 
 
 =========================================================================== FACET DESCRIPTION ( METAS )=======================================================================================================
 
 
 
 * We have 2 types of FACETS: GEO FACETS from the geolocalisation process AND TAGS from Named Entities detection

 NB : 
All detections are duplicated for title and text : we do not give the same importance of a detection from the title and from text.
Indeed, if a place is found in the title, it is taken as the place of the news, if no place found in the title, we scan the text.
 
 ------ GEO FACETS ------
 
 - ADDRESS DETECTION : BY RULE
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/addresstitle.xml
 * adressetitle + adressetext: an address : 3, rue Sufflot in the title of the news

 
 - PERSONALISED DICTIONNARY: BY ONTOLOGY
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/ontologies/yakdicotitle.xml
 The dico is automatically generated by the ontology batch ( check crontab for frequency but usually every 10 minutes ) ==> /home/bitnami/stack/nginx/html/PROD/YAKREP/BATCH/compileOntology.sh
 All data from db with the yakcat GEOLOCALISATION and GEOLOCALISATION#YAKDICO are taken.
 * yakdicotitle + yakdicotext: an entity found in the yakdico ( bois de Boulogne .... )

 
 - ARRONDISSEMENTS: BY RULE ( 3 files here )
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/arrondissementtitle.xml
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/arrondissementtitle2.xml
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/arrondissementtitle3.xml
 * arrondissementtitle + * arrondissemementtext: an arrondissement like "VIe" or "6eme arrondissement" or "Paris 3Ã¨"
  
 
 - QUARTIER : BY RULE
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/quartiertitle2.xml
 * quartiertitle + quartiertext: like : "quartier Latin" : 

 
 - VILLE : BY ONTOLOGY
 /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/ontologies/villetitle.xml
 * villetitle + * villetext : detect names of town ( like "Aix-en-Provence" ) according to the ontology : 
Each town need to be entered in db with the 2 yakcats GEOLOCALISATION  and GEOLOCALISATION#VILLE, and the onlogy batch is creating the ontology automatically.

- PLACE : BY RULE
/home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/placetitle.xml
* placetitle + placetext: detect places ( "zone commerciale XXX", "centre de recherche XXX" ) with the rule /home/bitnami/stack/exalead/cloudview-V6R2013.SP2.44163-linux-x64/resource/all-arch/yakwala/rules/placetitle.xml
 
 
 
 ------ TAGS --------
 
 - yakNE : NAMED ENTITIES FACETS : from the NE dictionnary
 - default XL detection : 
		Person_People
		Organization
		Event		
				
 
 
 
 =====================================================  ALGO DESCRIPTION ==============================================================================
 
 
 * the logic is the following :
 * the title has the priority. We take the text only if title is empty.
 * The smaller entity ( = the more precise ) is more significant : 
 * first we check the adresse, if empty we look at the yakdico than at the quartier then the arrondissement  and finally the city.
 * if no address found by xl, we try the place
 * Data process :
 * we get the enclosed image and resize it.
 * if no image, we make a screenshot of the article with apercite api
 * second we get the XY with a call to GMAP
 * we call GMAP only if we do not have the location in our PLACE collection ( to spare calls to gmap)
 * after a call to gmap we store in our db the result for next time
 * 
 * Every unsuccefull call to gmap is logged with a status 10 in the INFO => to go in the admin interface
 * 
 * 
 * 
 *  we check in db if we have the address
 * if not, we call gmap and we store the result in db 
 * 
 * all info must be associated to a place.
 *
 * A flag called default print flag is used to know what to do with not geolocalized data.
 * 
 * */


  /*INFO STATUS*/
 /*
 1 : OK
 2 : Waiting for validation
 3 : blacklisted by operator
 10 : GMAP did not succeed to find a location
 11 : if the place the info is mapped to has been blacklisted by the operator
 12 : Location found is not in the feed zone
 13 : info not geolocalized and refused by parser defaultPrintFlag (= 3 )
 
 */

 /*FEED DEFAULT PRINT FLAG*/
// "defaultPrintFlag" => 0, if not geolocalized, we localize at the default location but we don't print on the map ( only in the text feed )
// "defaultPrintFlag" => 1,// if not geolocalized, we localize at the default location and we print on the map
// "defaultPrintFlag" => 2,// do not perform a geoloc and locate on the default location of the feed
// "defaultPrintFlag" => 3, if not geolocalized, we don't take the info -> stored in status 13
 
 
 
// ================================================================================END DOCUMENTATION===============================================================================================
 
 
$infoColl = $db->info;
$placeColl = $db->place;
$yakcatColl = $db->yakcat;
$yakNEColl = $db->yakNE;
$tagColl = $db->tag;
$batchlogColl = $db->batchlog;
$statColl = $db->stat;
$feedColl = $db->feed;
$logCallToGMap = 0;
$logInfoInserted  = 0;
$logPlaceInserted  = 0;
$logInfoAlreadyInDB = 0;
$logPlaceAlreadyInDB = 0;
$logPrint = 0;
$logStatus10 = 0;
$logStatus11 = 0;
$logStatus12 = 0;
$logStatus13 = 0;
$logCallToApercite = 0;
$logPushToS3 = 0;
$gQuery = ''; // the gmap query params
$fullgQuery = ''; // the gmap full query , includes the uri ( stored for debug in the INFO and in the PLACE, (should be deleted in production mode.)
$yakCatId = array(); 
$placeArray = array(); // array of geoloc : ['lat'=>,'lng'=>,'_id'=>]
$flagShowAllText = (empty($_GET['showAllText']))?0:1;
$geolocYakCatId = "504d89f4fa9a958808000001"; // YAKCAT GEOLOC : @TODO softcode this
$feed['daysBack'] = 10;
    
	// echo 'Set Execution Status to 3 for the time of the fetching execution';
	$feedColl->update(
				array('_id'=>$feed['_id']),
				array('$set'=>array('lastExecStatus'=>3,'lastExecDate'=>new MongoDate(gmmktime()),'lastExecErr'=>''))
			);
			
	// get default PLACE
	$defaultPlace = $placeColl->findOne(array('_id'=>$feed['defaultPlaceId']));
	// we take the feed default location first and if not defined the default place location
	$defaultPlaceTitle = (empty($feed['defaultPlaceSearchName'])?$defaultPlace['title']:$feed['defaultPlaceSearchName']);		
	$defaultPlace['zone'] = (empty($feed['zone'])?$defaultPlace['zone']:$feed['zone']);		
	$defaultPlace['zoneName'] = (empty($feed['zoneName'])?$defaultPlace['zoneName']:$feed['zoneName']);		
	$defaultPlace['location'] = (empty($feed['defaultPlaceLocation'])?$defaultPlace['location']:$feed['defaultPlaceLocation']);		
	
	if(empty($defaultPlace['address']['country']))
		$defaultPlace['address']['country'] = 'France';
							
	echo '<br> Parsing feed: <b>'.$feed['name'].'</b>';
	echo '<br> Default location of the feed : <b>'.$defaultPlaceTitle.'</b>';
	$searchDate = date('Y/m/d',(mktime()-86400*$feed['daysBack']));
	
	$origin ="+AND+file_name%3D".$feed['name'].'.xml';
	$feed['XLconnector'] = 'parserPAPI';
	$url = "http://ec2-54-246-84-102.eu-west-1.compute.amazonaws.com:62010/search-api/search?q=%23all+AND+document_item_date%3E%3D".$searchDate."+AND+source%3D".$feed['XLconnector'].$origin."&of=json&b=0&hf=512000&s=document_item_date";
	
	echo '<br> Days back : <b>'.$feed['daysBack'].'</b>';
	echo '<br> Url called : <b>'.$url.'</b>';
	
	
	$ch = curl_init();
	curl_setopt($ch,CURLOPT_URL,$url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
	$result = curl_exec($ch);
	curl_close($ch);
	$json = json_decode($result);
	$hits = $json->hits;
	
	echo '<br><br>Fetching news...<br>';
	$item = 0;
	foreach($hits as $hit){
		//if($item > 100)
		//	exit;
		$item ++;
		$lieu = array();
		$lieuTmp = array();
		$lieutitle = array();
		$lieutext = array();
		$adresse = array();
		$adressetitle = array();
		$adressetitleTMP = array();
		$adressetext = array();
		$arrondissement = array();
		$arrondissementtitle = array();
		$arrondissementtext = array();
		$quartier = array();
		$quartiertitle = array();
		$quartiertext = array();
		$yakdico = array();
		$yakdicoTmp = array();
		$yakdicotitle = array();
		$yakdicotext = array();
		$yakNE = array();
		$ville = array();
		$villetitle = array();
		$villetext = array();
		$enclosure = "";
		$geolocationInput = array();
		$addressInput = array();
		$yakcatInput = array();
		$placeInput = array();
		$locationTmp = array();
		$eventDateInput = array();
		$geolocGMAP = array();
		$addressGMAP = array("street"=>"","arr"=>"","city"=>"","state"=>"","area"=>"","country"=>"","zip"=>"");
		$freeTag = array();
		$title = "";
		$content = "";
		$titleXL = "";
		$contentXL = "";
		$contact = array();
		$tel = "";
		$mobile = "";
		$mail = "";
		$transportation = "";
		$web = "";
		$opening = "";
		$thumb = "";
		$placeArray = array();	
		$laville = '';
		
		$metas = $hit->metas;
		$groups = $hit->groups;
		// fetch metas
		foreach($metas as $meta){
			//echo '<br><b>'.$meta->name.'</b>='.$meta->value;
			if($meta->name == "item_title")
				  $title = $meta->value;
			if($meta->name == "item_desc")
				  $content = $meta->value;
			if($meta->name == "title")
				  $titleXL = $meta->value;
			if($meta->name == "text")
				  $contentXL = $meta->value;
			if($meta->name == "item_date")
				  $datePub = $meta->value;
			
			if($meta->name == "item_eventdate"){
				$eventDateInputTMP = explode('|',trim($meta->value));
				foreach($eventDateInputTMP as $val)
					$eventDateInput[]= explode('#',$val);
			}
			
			//var_dump($content);
			if($meta->name == "publicurl")
				  $outGoingLink = $meta->value;
			$outGoingLink = empty($outGoingLink)?$feed['linkSource']:$outGoingLink;
			
			if($meta->name == "image_enclosure")
				  $enclosure = $meta->value;
			if($meta->name == "item_geolocation"){
				
				if(strpos($meta->value,'#') !== false)
					$geolocationInput = explode('#',trim($meta->value));
				if(strpos(trim($meta->value),' ') !== false)
					$geolocationInput = explode(' ',trim($meta->value));
					
				if($geolocationInput[0] < $geolocationInput[1]){	 // in our latitudes : lng < lat => we switch
					$tmpLat = $geolocationInput[1];
					$tmpLng = $geolocationInput[0];
					$geolocationInput[1] = $tmpLng;
					$geolocationInput[0] = $tmpLat;
				}
			}
			
			if($meta->name == "item_latitude")
				  $latInput = trim($meta->value);
			if($meta->name == "item_longitude")
				  $lngInput = trim($meta->value);
			if( !empty($latInput) && !empty($lngInput) )
				$geolocationInput = array($latInput, $lngInput);
			if($meta->name == "item_address")
				  $addressInput = $meta->value;
			if($meta->name == "item_yakcat")
				  $yakcatInput = explode('#',trim($meta->value));
			if($meta->name == "item_place")
				  $placeInput = trim($meta->value);
			if($meta->name == "item_freetag"){
				  $freetagInput = explode('#',trim($meta->value));
				  foreach($freetagInput as $tagInput)
					$freeTag[] = $tagInput;
			}
			if($meta->name == "item_tel")
				  $telInput = trim($meta->value);
			if($meta->name == "item_mobile")
				  $mobileInput = trim($meta->value);
			if($meta->name == "item_mail")
				  $mailInput = trim($meta->value);
			if($meta->name == "item_transportation")
				  $transportationInput = trim($meta->value);
			if($meta->name == "item_web")
				  $webInput = trim($meta->value);
			if($meta->name == "item_opening")
				  $openingInput = trim($meta->value);
				
			
		}
		
		//var_dump($geolocationInput);
		
		echo "<br><br>********************************************************************************************************************************************************************************************************************<br>";
		echo "<b>".$title."</b> ( ".$datePub." )<br>";
		//$flagShowAllText = 1;
		if($flagShowAllText == 1){
		  echo "<br><b>Title XL : </b>".$titleXL."<br><b>Content : </b>".$content."<br><b>Content XL : </b>".$contentXL."<br><a target='_blank' href='".$outGoingLink."'>More</a><br> ";
		}
		
		
		// fetch annotations
		//echo "<br><br>----annotations:<br>";
		foreach($groups as $group){
			 //echo '<br><b>'.$group->id.'</b>='.sizeof($group->categories);
			 foreach($group->categories as $category){
				 /*city*/
				 if($group->id == "villetitle"){
					$flagIncluded = 0;
					foreach($villetitle as $vl){
					   if( preg_match("/".$vl."/",$category->title) > 0 || preg_match("/".$category->title."/",$vl) > 0)
						   $flagIncluded++;
					}
					if($flagIncluded == 0)
					   $villetitle[]= $category->title;
				 }
				 
				 if($group->id == "villetext"){
					$flagIncluded = 0;
					foreach($villetext as $vl){
					   if( preg_match("/".$vl."/",$category->title) > 0 || preg_match("/".$category->title."/",$vl) > 0)
						   $flagIncluded++;
					}
					if($flagIncluded == 0)
					   $villetext[]= $category->title;
				 }
				 // any city in the title has the priority,
				 if(sizeof($villetitle) > 0){
					if(sizeof($villetext) > 0){//  but need to check if the text has not the same address but more precise
						$villetitleTMP = array();
						foreach($villetitle as $vtitle){
							foreach($villetext as $vtext){
								if( preg_match("/".$vtitle."/",$vtext) > 0)
									$villetitleTMP[] = $vtext;  
							}
						}
					if(sizeof($villetitleTMP) > 0)
					   $villetitle = $villetitleTMP;
					}
					$ville = $villetitle;
				 }else
					$ville = $villetext;
				
				/*// filter in our zone
				$villeTmp = array();
				foreach($ville as $v){
					$isInZone = $placeColl->findOne(array('title'=>$v,"zone"=>$defaultPlace['zone']));
					if($isInZone)
						$villeTmp[] = $v;								
				}
				$ville = $villeTmp;	
				*/

				 /*address*/
				 if($group->id == "adressetitle3"){
					$flagIncluded = 0;
					foreach($adressetitle as $adr){
					   if( preg_match("/".$adr."/",$category->title) > 0 || preg_match("/".$category->title."/",$adr) > 0)
						   $flagIncluded++;
					}
					if($flagIncluded == 0)
					   $adressetitle[]= $category->title;
				 }

				 if($group->id == "adressetext3"){
					$flagIncluded = 0;
					foreach($adressetext as $adr){
					   if( preg_match("/".$adr."/",$category->title) > 0 || preg_match("/".$category->title."/",$adr) > 0)
						   $flagIncluded++;
					}
					if($flagIncluded == 0)
					   $adressetext[]= $category->title;
				 }
				 
				 
				

				// any address in the title has the priority,
				 if(sizeof($adressetitle) > 0){
					if(sizeof($adressetext) > 0){//  but need to check if the text has not the same address but more precise
						$adressetitleTMP = array();
						foreach($adressetitle as $adrtitle){
							foreach($adressetext as $adrtext){
								if( preg_match("/".$adrtitle."/",$adrtext) > 0)
									$adressetitleTMP[] = $adrtext;  
							}
						}
					if(sizeof($adressetitleTMP) > 0)
					   $adressetitle = $adressetitleTMP;
					}
					$adresse = $adressetitle;
				 }else
					$adresse = $adressetext;
			 
					
					
					
					
				 /*QUARTIER*/
				 if($group->id == "quartiertitle2")
					$quartiertitle = $category->title;
				 if($group->id == "quartiertext2")
					$quartiertext = $category->title;
				 if(empty($quartiertitle))
					$quartier = $quartiertext; 
				 else
					$quartier = $quartiertitle; 
					 
				/*
				$quartier = str_replace('quartier','',$quartier);			
				$quartier = str_replace('quartiers','',$quartier);			
				$quartier = str_replace('secteur','',$quartier);			
				$quartier = str_replace('secteurs','',$quartier);			
				*/
				
				 /*ARRONDISSEMENT*/   
				 if($group->id == "arrondissementtitle")
					   $arrondissementtitle = $category->title;
				 if($group->id == "arrondissementtext")
					   $arrondissementtext = $category->title;
				 if(empty($arrondissementtitle))
					$arrondissement = $arrondissementtext; 
				 else
					$arrondissement = $arrondissementtitle; 
					
				 /*YAKWALA DICO*/
				 if($group->id == "yakdicotitle")
					   $yakdicotitle = $category->title;
				 if($group->id == "yakdicotext")
					   $yakdicotext = $category->title;
				 if(empty($yakdicotitle))
					$yakdicoTmp = $yakdicotext; 
				 else
					$yakdicoTmp = $yakdicotitle; 
				
				$isInZone = $placeColl->findOne(array('title'=>$yakdicoTmp,"zone"=>$defaultPlace['zone']));
				if($isInZone)
					$yakdico = $yakdicoTmp;
				
				/*YAKWALA NAMED ENTITIES*/
				if($group->id == "yakNE")
					$yakNE[] = $category->title;
					
					
				 /*LIEU*/
				 if(empty($placeInput)){
					 if($group->id == "placetitle")
						   $lieutitle = $category->title;
					 if($group->id == "placetext")
						   $lieutext = $category->title;
					 if(empty($lieutitle))
						$lieu = $lieutext; 
					 else
						$lieu = $lieutitle; 
				 }else
					$lieu = $placeInput;
				
			
				 /*OTHER CAT*/   
				 if($group->id == "Person_People")
					   $freeTag[]= yakcatPathN($category->title,0);
								
				 if($group->id == "Organization")
					   $freeTag[]= yakcatPathN($category->title,0);
				 
				 if($group->id == "Event")
					   $freeTag[]= yakcatPathN($category->title,0);
			 }
		}
			
		// if the news must be mapped on the default feed's location 	
		if($feed['defaultPrintFlag'] == 2){
			$print = 1;
			$geoloc = $defaultPlace['location'];
			$status = 1;
			$contact = array("tel"=>"","mobile"=>"","mail"=>"","transportation"=>"","web"=>"","opening"=>"",);
			$placeArray[] = array('_id'=>$defaultPlace['_id'],'lat'=>$defaultPlace['location']['lat'],'lng'=>$defaultPlace['location']['lng'],'address'=>$defaultPlaceTitle,'status'=>$status,'print'=>$print,'contact'=>$contact);	
		}else{
		
			//logical construction of the address :
			/*Priority :  ADDRESSINPUT -> ADDRESSE -> YAKDICO -> ARRONDISSEMENT -> QUARTIER -> VILLE*/
			 // set address from input or from semantic factory
			 if(!empty($addressInput)){
				echo "<br>Address is given, we use it for the geoloc";
				$locationTmp[] = $addressInput;
			 }else{
				
				if(!empty($adresse)){
					if(is_array($adresse))
					   foreach($adresse as $ad)
						   $locationTmp[] = $ad;
					else   
						$locationTmp[] = $adresse;
				}else{	
					if(!empty($yakdico)){
							if(is_array($yakdico))
								foreach($yakdico as $dico)
									$locationTmp[] = $dico;
							else   
								$locationTmp[] = $yakdico;
					}else{
						if(!empty($lieu)){
							if(is_array($lieu))
								foreach($lieu as $l)
									$locationTmp[] = $l;
							else   
								$locationTmp[] = $lieu;
						}else{    
							if(!empty($quartier)){
									if(is_array($quartier))
										foreach($quartier as $quar)
											$locationTmp[] = $quar;
									else 
										$locationTmp[] = $quartier;
							}else{
								if(!empty($arrondissement)){
								if(is_array($arrondissement))
									foreach($arrondissement as $arr)
										$locationTmp[] = rewriteArrondissement($arr);
								else   
									$locationTmp[] = rewriteArrondissement($arrondissement);
								}else{
								
									if(is_array($ville))
										foreach($ville as $vil)
											$locationTmp[] = $vil;
									else 
										$locationTmp[] = $ville;
								}
							}
						}
					}
				}
			}
			
			// la ville
			
			if(sizeof($ville) > 0){
				if(is_array($ville))
					$laville = $ville[0];
				else 
					$laville = $ville;
			}
			
			
			if(!empty($geolocationInput)){ // if geolocation is given
				$formatted_addressToPrint = '';
				$placeToPrint = '';
				$addressToPrint = '';
				$loc = '';
				$place = array();
				// in this case, we take the input address or place or default place title as the $loc
				if(!empty($placeInput) || !empty($addressInput)){
					if(!empty($placeInput)){
						$formatted_addressToPrint .= $placeInput;
						if(!empty($addressInput))
							$formatted_addressToPrint .= ' ,';
						$placeToPrint = $placeInput;
					}
					if(!empty($addressInput)){
						$formatted_addressToPrint .= $addressInput;
						$addressToPrint = $addressInput;
					}
				}else{
					$formatted_addressToPrint = $defaultPlaceTitle;
					$placeToPrint = $defaultPlaceTitle;
					$addressToPrint = $defaultPlaceTitle;
				}
					
				echo "<br> GEOLOC IS GIVEN ";
				$status = 1;
				$print = 1;
				$geoloc = array((float)$geolocationInput[0],(float)$geolocationInput[1]);
				$contact = array("tel"=>"","mobile"=>"","mail"=>"","transportation"=>"","web"=>"","opening"=>"",);
				$address = array("street"=>$addressToPrint,"arr"=>"","city"=>"","state"=>"","area"=>"","country"=>"","zip"=>"");
				$gQuery = 'No call to gmap, geoloc is given';
				$place = array(
							"title"=> $placeToPrint,
							"slug"=> slugify($placeToPrint),
							"content" =>"",
							"thumb" => "",
							"origin"=>$feed['humanName'],    
							"access"=> 2,
							"licence"=> "Yakwala",
							"outGoingLink" => $outGoingLink,
							"yakCat" => array(new MongoId($geolocYakCatId)),
							"yakCatName" => array('GÃ©olocalisation'),
							"creationDate" => new MongoDate(gmmktime()),
							"lastModifDate" => new MongoDate(gmmktime()),
							"location" => array("lat"=>$geoloc[0],"lng"=>$geoloc[1]),
							"status" => $status,
							"user" => 0,
							"feed" => $feed['_id'],
							"zone"=> $defaultPlace['zone'],
							"zoneName"=> $defaultPlace['zoneName'],
							"address" => $address,
							"formatted_address" => $formatted_addressToPrint,
							"contact"=>$contact,
							"debugCallGmap" => $gQuery,
						  );
						  
						  
				$res = $placeColl->findOne(array("title"=>$placeToPrint,"zone"=>$defaultPlace['zone']));
				if(empty($res)){// The place is not in db
					echo "<br> The location does not exist in db, we create it.";
					$logPlaceInserted++;
					$placeColl->save($place); 
					$placeColl->ensureIndex(array("location"=>"2d"));
					$res['_id'] = $place['_id'];
				}else{ // The place already in DB,
					$logPlaceAlreadyInDB++;
					echo "<br> The location exists in db => doing nothing.";
				}
				
				$placeArray[] = array('_id'=>$res['_id'],'lat'=>$geoloc[0],'lng'=>$geoloc[1],'address'=>$formatted_addressToPrint,'status'=>$status,'print'=>$print,'contact'=>$contact);
			 
			 
				
			}elseif(sizeof($locationTmp ) > 0){
				// if we found a location string, 
				// => we try to get the position of the location with a call in db 
				// => if no location in db, we call gmap
				
				foreach($locationTmp as $loc){
				
						
					$fullgQuery = '';
					echo "<br><b style='background-color:#00FF00;'>Location found by XL :</b> ".$loc;
					
					//check if in db if the place exists
					$place = $placeColl->findOne(array("title"=>$loc,"zone"=>$defaultPlace['zone']));
					//var_dump($place);
					if($place){ 
						// FROM DB
						echo "<br> Location found in DB !";
						// if place exist but out of zone, we erease the loc:
						echo "<br>OK : Place is in the zone";
						if($place['status'] == 3){ // if the place has been blacklisted by the operator
							echo "<br>WARN : Place is blacklisted";
							$status = 11; // alert status
							$print = 0; // don't print on the map, but can be printed on the news feed
						}else{
							$status = 1;
							$print = 1;
						}
						
						$placeArray[] = array('_id'=>$place['_id'],'lat'=>$place['location']['lat'],'lng'=>$place['location']['lng'],'address'=>$place['formatted_address'],'status'=>$status,'print'=>$print,'contact'=>empty($place['contact'])?'':$place['contact']);
						
						// add tags to info tags
						if(!empty($place['freeTag']))
							$freeTag = array_merge($freeTag,$place['freeTag']);
						
						
						
						

						
					}else{ // the place is not in db
						echo "<br> Location NOT found in DB !";	
						// FROM GMAP
							
						$logCallToGMap++;
						
						
						echo '<br>loc: '.var_dump($loc);
						echo '<br>laville : '.var_dump($laville);
						echo '<br>addressInput : '.var_dump($addressInput);
						echo '<br>$defaultPlace title : '.var_dump($defaultPlaceTitle);
						echo '<br>$defaultPlace country : '.$defaultPlace['address']['country'];		
						echo '<br>$lieu : '.var_dump($lieu);
						
						
						
						
						// check if blacklisted loc:
						$BLloc = $placeColl->findOne(array("title"=>$loc,"zone"=>$defaultPlace['zone'],"status"=>3));
						if(!empty($BLloc)){
							$loc = '';
						}
						// check if blacklisted ville:
						$BLville = $placeColl->findOne(array('title'=>$laville,"zone"=>$defaultPlace['zone'],"status"=>3));
						if(!empty($BLville)){
							$laville = '';
							$ville = array();
						}
						
						$gQuery = $loc;
						
						if( strlen($laville)> 0 && $laville != $defaultPlaceTitle && !preg_match('/\b'.$laville.'\b/',$gQuery))
							$gQuery .= ', '.$laville;
							
						if( !preg_match('/\b'.$defaultPlaceTitle.'\b/',$gQuery))	
							$gQuery .= ', '.$defaultPlaceTitle;
						
						if( !preg_match('/\b'.$defaultPlace['address']['country'].'\b/', $gQuery) && !empty($defaultPlace['address']['country']) )
							$gQuery .= ', '. $defaultPlace['address']['country'];
							
						$gQuery = urlencode(utf8_decode(suppr_accents($gQuery)));
						
						
						//$gQuery = urlencode(utf8_decode(suppr_accents($loc.( (strlen($laville)> 0 && $laville != $defaultPlaceTitle && preg_match('/^'.$loc.'$/',$laville) === FALSE ) ? ', '.$laville:'').', '.((preg_match('/^'.$loc.'$/',$defaultPlaceTitle) === FALSE)?$defaultPlaceTitle:'').' '. ( (preg_match('/^'.$loc.'$/',$defaultPlace['address']['country'] ) === FALSE) ? $defaultPlace['address']['country']:'')  )));
						
						echo '<br> QUERY = '.$gQuery; 
						
						if(sizeof($loc) > 0 )
							$resGMap = getLocationGMap($gQuery,'PHP',1,$conf);
						elseif(sizeof($lieu) > 0)
							$resGMap = getPlaceGMap($gQuery,'PHP',1,$conf);
						else
							$resGMap = '';
						
						
						if(!empty($resGMap['gQuery']))
							$fullgQuery = $resGMap['gQuery'];	
						
						echo '<br>';
						if(!empty($resGMap) &&  $resGMap['formatted_address'] != $defaultPlace['address']['country'] && $resGMap['formatted_address'] != $defaultPlaceTitle &&  $resGMap['formatted_address'] != $defaultPlaceTitle.', '.$defaultPlace['address']['country']){
							echo "<br> GMAP found the coordinates of this location ! ";
							// check if the result is in the zone
							$zoneObj = new Zone();
							$zoneNums = $zoneObj->findNumByLocation(array('lat'=>$resGMap['location'][0],'lng'=>$resGMap['location'][1]));
							if(!in_array($feed['zone'],$zoneNums)){
								echo "<br><b>Err:</b>Location found is not in the feed zone ( ".$feed['zone']." )";
								$status = 12;
								$geolocGMAP = array(0,0);
								$addressGMAP = array("street"=>"","arr"=>"","city"=>"","state"=>"","area"=>"","country"=>"","zip"=>"");
								$print = 0;
								$formatted_addressGMAP = "";
							}else{														
								$status = 1;
								$print = 1;	
							}
							$geolocGMAP = $resGMap['location'];
							$addressGMAP = $resGMap['address'];
							$formatted_addressGMAP = $resGMap['formatted_address'];
						}else{
							echo "<br> GMAP did not succeed to find a location, we store the INFO in db with status 10.";
							$status = 10;
							$geolocGMAP = array(0,0);
							$addressGMAP = array("street"=>"","arr"=>"","city"=>"","state"=>"","area"=>"","country"=>"","zip"=>"");
							$print = 0;
							if(!empty($resGMap['formatted_address']))
								$formatted_addressGMAP = $resGMap['formatted_address'];
							else
								$formatted_addressGMAP = "";	
						} 
						
						// we store the result in PLACE for next time
						$contact = array(
											"tel"=>$tel,
											"mobile"=>$mobile,
											"mail"=>$mail,
											"transportation"=>$transportation,
											"web"=>$web,
											"opening"=>$opening,
										);
						
						$place = array(
									"title"=> (empty($lieu))?$loc:$lieu,
									"slug"=> (empty($lieu))?slugify($loc):slugify($lieu),
									"content" =>"",
									"thumb" => "",
									"origin"=>$feed['humanName'],    
									"access"=> 2,
									"licence"=> "Yakwala",
									"outGoingLink" => $outGoingLink,
									"yakCat" => array(new MongoId($geolocYakCatId)),
									"yakCatName" => array('GÃ©olocalisation'),
									"creationDate" => new MongoDate(gmmktime()),
									"lastModifDate" => new MongoDate(gmmktime()),
									"location" => array("lat"=>$geolocGMAP[0],"lng"=>$geolocGMAP[1]),
									"status" => $status,
									"user" => 0,
									"feed" => $feed['_id'],
									"zone"=> $defaultPlace['zone'],
									"zoneName"=> $defaultPlace['zoneName'],
									"address" => $addressGMAP,
									"formatted_address" => $formatted_addressGMAP,
									"contact"=>$contact,
									"debugCallGmap" => $fullgQuery,
								  );
								  
								  
						$res = $placeColl->findOne(array("title"=>(empty($lieu))?$loc:$lieu,"zone"=>$defaultPlace['zone']));
						if(empty($res)){// The place is not in db
							echo "<br> The location does not exist in db, we create it.";
							$logPlaceInserted++;
							$test = $placeColl->save($place); 
							$placeColl->ensureIndex(array("location"=>"2d"));
							$res['_id'] = $place['_id'];
						}else{ // The place already in DB,
							$logPlaceAlreadyInDB++;
							echo "<br> The location exists in db => doing nothing.";
						}
						$placeArray[] = array('_id'=>$res['_id'],'lat'=>$geolocGMAP[0],'lng'=>$geolocGMAP[1],'address'=>$formatted_addressGMAP,'status'=>$status,'print'=>$print,'contact'=>$contact);
					 
					 }         
				}
				
			}else{ 
				echo "<br>NO GEOLOC given and no ADDRESS found. We apply the default behaviour of the defaultFeedFlag";
			
				// if the parser config tells us to forget about the info if not geolocalized
					if($feed['defaultPrintFlag'] == 3){
						echo "<br> NO location found, info is send with status 13";
						$print = 0;
						$status = 13;
					}
					
				// if feedflag tell us to put the info on the default feed location	or only on the feed page
				if($feed['defaultPrintFlag'] == 1 || $feed['defaultPrintFlag'] == 0){
					$print = $feed['defaultPrintFlag'] ;
					$geoloc = $defaultPlace['location'];
					$status = 1;
					$contact = array("tel"=>"","mobile"=>"","mail"=>"","transportation"=>"","web"=>"","opening"=>"",);
					$placeArray[] = array('_id'=>$defaultPlace['_id'],'lat'=>$defaultPlace['location']['lat'],'lng'=>$defaultPlace['location']['lng'],'address'=>$defaultPlaceTitle,'status'=>$status,'print'=>$print,'contact'=>$contact);	
				}
			}
		}
	
		
		// catch keyword words in title
		if(!empty($title)){
			// catch twitter hashtag in title
			$matches = array();
			if (preg_match_all('/#([^\s]+)/', $title, $matches)) {
					$freeTag = array_merge($freeTag,$matches[1]);
			}
		
		}
		
		// add tags from feed
		$freeTag[] = $feed['tag'];
		
		// YAKCATS & TAGS from NE
		$yakCatIdFromNE = array();
		foreach($yakNE as $ne){
			echo "<br>NE=".$ne;
			$regexObj = new MongoRegex("/^$ne$/i"); 
			//$ynes = $yakNEColl->find(array('status'=>1,'match.title'=>$regexObj));
			$ynes = $yakNEColl->find(array('status'=>1,'match.title'=>$ne));
			foreach( $ynes as $yne){
				$freeTag[] =  $yne['title'];
				if(sizeof($yne['yakCatId'])>0)
					$yakCatIdFromNE = array_merge($yakCatIdFromNE, $yne['yakCatId']);
			}
		}
		
		
		
		
		/* YAKCATS */
		$yakCatIdArray = array();
		$yakCatId = array();
		$yakCatName = array();
		$yakCatIdArray = array_merge($yakcatInput,$feed['yakCatId'],$yakCatIdFromNE);
		$yakCatIdArray = array_unique($yakCatIdArray);
		/*
		if(empty($yakCatIdArray) || $yakCatIdArray[0] == '' )
			$yakCatIdArray = array("504d89c5fa9a957004000000");
		*/
		foreach ($yakCatIdArray as $id) {
			$yc = ($yakcatColl->findOne(array('_id'=>new MongoId($id))));
			if(!empty($yc)){
				$yakCatId[] = new MongoId($yc['_id']);
				$yakCatName[] = $yc['title'];
			}
		}
	
		
		
		/* EVENT DATE */
		$eventDate = array();
		$i=0;
		foreach ($eventDateInput as $date) {
			
			$fixedDate = str_replace('.0Z','Z',$date[0]);
			$dateTimeFrom = DateTime::createFromFormat(DateTime::ISO8601, $fixedDate);
			$eventDate[$i]['dateTimeFrom'] = new MongoDate($dateTimeFrom->gettimestamp() - date_offset_get($dateTimeFrom));

			$fixedDate = str_replace('.0Z','Z',$date[1]);
			$dateTimeEnd = DateTime::createFromFormat(DateTime::ISO8601, $fixedDate);
			$eventDate[$i]['dateTimeEnd'] = new MongoDate(date_timestamp_get($dateTimeEnd) - date_offset_get($dateTimeEnd));
			
			$i++;
		}
	
		
		
		// clean duplicates cats and tags
		$freeTag = array_unique($freeTag);
		$yakCatName = array_unique($yakCatName);
		$yakCatId = array_unique($yakCatId);
		if(sizeof($freeTag)>0)
			$freeTag = array_diff($freeTag,$yakCatName);
		
		$freeTag = (array) $freeTag;
		$freeTagNew = array_values($freeTag);
		$freeTag = $freeTagNew;
		
		// clean curly quotes and html tags
		//$content = (!empty($content))?strip_tags(convert_smart_quotes($content),"<br><b><strong>"):"";
		$content = (!empty($content))?convert_smart_quotes($content):"";
		$title = strip_tags(trim(convert_smart_quotes($title)));	
			
		
		
		// NOTE:  WE INTRODUCE MULTIPLE INFO IF WE HAVE MULTIPLE LOCATIONS
		$i = 0;
		$geolocItem = array();
		foreach($placeArray as $geolocItem){
			
			
			if( ( !empty($title) && !empty($geolocItem['lat']) && !empty($geolocItem['lng']) ) || $status >= 10 ){
				
				
				$datePubArray1 = explode(' ',$datePub);
				$datePubArrayD = explode('/',$datePubArray1[0]);
				$datePubArrayT = explode(':',$datePubArray1[1]);
				
				
				if($feed['yakType'] == 2){ // AGENDA
					$tsEnd = date_timestamp_get($dateTimeEnd) + $feed['persistDays']*86400;
					$tsPub = $tsEnd - 15 * 86400; // 15 days before the endPrint
				}	
				else{
					$tsPub = gmmktime($datePubArrayT[0],$datePubArrayT[1],$datePubArrayT[2],$datePubArrayD[0],$datePubArrayD[1],$datePubArrayD[2]);
					$tsEnd = $tsPub + $feed['persistDays']*86400;
				}
			
				echo "<br>----LOC-----<br>";	
				echo "adresse: ";var_dump($adresse);
				echo "<br>lieu: ";var_dump($lieu);
				echo "<br>yakdico: ";var_dump($yakdico);
				echo "<br>quartier: ";var_dump($quartier);
				echo "<br>arr: ";var_dump($arrondissement);
				echo "<br>geoinput: ";var_dump($geolocationInput);
				echo "<br>addressInput: ";var_dump($addressInput);
				echo "<br>placeinput: ";var_dump($placeInput);
				echo "<br>laville: ";var_dump($laville);
				echo "<br>----CAT-----<br>";
				echo "yakcat: ";var_dump($yakCatName);
				echo "<br>tag: ";var_dump($freeTag);
				// VERIFICATION : if the GMAP gives us a big city, we don't print it on the map
				if( sizeof($adresse) == 0 
					&& sizeof($lieu) == 0 
					&& sizeof($yakdico) == 0 
					&& sizeof($quartier) == 0
					&& sizeof($arrondissement) == 0
					&& sizeof($geolocationInput) == 0
					&& sizeof($addressInput) == 0
					&& sizeof($placeInput) == 0
					&& ($laville == "Marseille" || $laville == "Paris")
					&& $feed['defaultPrintFlag'] != 2
				){
					echo "<br> GEOLOC NOT PRECISE => NOT PRINTED ON THE MAP";
					$geolocItem['print'] = 0;
				}
		
				echo "<br>time: ".$datePubArrayT[0]."-".$datePubArrayT[1]."-".$datePubArrayT[2]."-".$datePubArrayD[0]."-".$datePubArrayD[1]."-".$datePubArrayD[2];
				$info = array();
				echo 'TITLE'.$title;
				$info['title'] = $title;
				$info['slug'] = slugify($title);
				$info['content'] = $content;
				$info['outGoingLink'] = $outGoingLink;
				$info['origin'] = $feed['humanName'];
				$info['originLink'] = $feed['linkSource'];
				$info['access'] = 2;
				$info['licence'] = (!empty($feed['licence']))?$feed['licence']:"Yakwala";
				$info['heat'] = "80";
				$info['yakCat'] = array_unique($yakCatId);
				$info['yakCatName'] = array_unique($yakCatName);
				$info['yakType'] = $feed['yakType'];
				$info['freeTag'] = array_unique($freeTag);
				$info['pubDate'] = new MongoDate($tsPub);
				$info['eventDate'] = $eventDate;
				$info['creationDate'] = new MongoDate(gmmktime());
				$info['lastModifDate'] = new MongoDate(gmmktime());
				$info['dateEndPrint'] = new MongoDate($tsEnd); // 
				$info['print'] = $geolocItem['print'];
				$info['status'] = $geolocItem['status'];
				$info['user'] = 0;
				$info['feed'] = $feed['_id'];
				$info['zone'] = $defaultPlace['zone'];
				$info['zoneName'] =  $defaultPlace['zoneName'];
				$info['location'] = array("lat"=>$geolocItem['lat'],"lng"=>$geolocItem['lng']);
				$info['address'] = $geolocItem['address'];
				$info['placeId'] = new MongoId($geolocItem['_id']);
				$info['contact'] = $geolocItem['contact'];
				$info["debugCallGmap"] = $fullgQuery;
				
				// LOG
				if($info['print'] == 1)
					$logPrint++;
				if($info['status'] == 10)
					$logStatus10++;
				if($info['status'] == 11)
					$logStatus11++;
				if($info['status'] == 12)
					$logStatus12++;
				if($info['status'] == 13)
					$logStatus13++;
				
				// check if data is not in DB
				//$dataExists = $infoColl->findOne(array("title"=>$title,"location"=>array('$near'=>$info['location'],'$maxDistance'=>0.000035),"status"=>1,"pubDate"=>new MongoDate($tsPub),"zone"=>$defaultPlace['zone']));
				$dataExists1 = $infoColl->findOne(array("title"=>$title,"location"=>array('$near'=>$info['location'],'$maxDistance'=>0.000035),"zone"=>$defaultPlace['zone']));
				
				$dataExists2 = $infoColl->findOne(array("outGoingLink"=>$info['originLink']));
				
				if( ( empty($dataExists1) && empty($dataExists2) )){
					echo "<br> The info does not exist in DB, we insert it.";
					
					/* THUMB  */
					// create thumb and  push the image to S3
					$thumbFlag = 0;
					if(substr($enclosure,0,5) != 'http:')
						$enclosure = 'http:'.$enclosure;	
					
					if(substr($enclosure,0,7) != 'http://')
						$enclosure = 'http://'.$enclosure;	
					
					echo "<br>enclosure:".$enclosure;
					if(!empty($enclosure)){
						$res = createImgThumb($enclosure,$conf);
						$logPushToS3 = $logPushToS3+3;
						if($res == false){
							$thumb = "";
							$thumbFlag = 0;	
						}
						else{
							$thumb = $res;
							$size = getimagesize($enclosure);
							if($size[0] > 320)
								$thumbFlag = 2;	
							else
								$thumbFlag = 1;	
						}
					}else{
						if(!empty($content)){
							$img = array();
							$dom = new domDocument;
							if($dom->loadHTML($content)){
								$dom->preserveWhiteSpace = false;
								$images = $dom->getElementsByTagName('img');
								foreach ($images as $image) {
									$img[] =  $image->getAttribute('src');
								}
								if(sizeof($img) > 0 && $img[0] != '' ){
									$res = createImgThumb($img[0],$conf);
									$logPushToS3 = $logPushToS3+3;
									if($res == false){
										$thumb = "";
										$thumbFlag = 0;	
										/*
										if(!empty($outGoingLink) && ($outGoingLink[0] != "")){
											$thumb = getApercite($outGoingLink,$conf);
											$logPushToS3++;
											$logCallToApercite++;
											$thumbFlag = 1;
										}else{
											$thumb = "";
											$thumbFlag = 0;
										}	*/	
									}
									else{
										$size = getimagesize($img[0]);
										if($size[0] > 320)
											$thumbFlag = 2;	
										else
											$thumbFlag = 1;	
											
										$thumb = $res;
									}
								}else{
									$thumb = "";
									$thumbFlag = 0;	
									/*
									if(!empty($outGoingLink) && ($outGoingLink[0] != "")){
										$thumb = getApercite($outGoingLink,$conf);
										$logPushToS3++;
										$logCallToApercite++;
										$thumbFlag = 1;	
									}else{
										$thumb = "";
										$thumbFlag = 0;
									}*/
								}
							}
						}
					}
					
					// overwrite if set in the feed
					if(!empty($feed['thumbFlag']))
						$thumbFlag = $feed['thumbFlag'];
					
					$info['thumb'] = $thumb;
					$info['thumbFlag'] = $thumbFlag;						
				
				
					// add tags to the top collection
					foreach($freeTag as $theTag){
						if($info['yakType']==2)
							$tagDate = $eventDate[0]['dateTimeFrom'];
						else
							$tagDate = new MongoDate($tsPub);
							
						$beginOfDay = strtotime("midnight", $tagDate->sec);
						$endOfDay   = strtotime("tomorrow", $beginOfDay) - 1;
						$dataExists = $tagColl->findOne(array("title"=>$theTag,"location"=>array('$near'=>$info['location'],'$maxDistance'=>0.5),"usageDate"=>array('$gte'=>new MongoDate($beginOfDay),'$lte'=>new MongoDate($endOfDay))));
						
						if($info['status'] ==1){
							if(!$dataExists){
								echo '<br>Tag does not ->exit we insert it as a hot tag';
								$tagColl->save(array("title"=>$theTag,"numUsed"=>1,"location"=>$info['location'],"usageDate"=>$tagDate,"creationDate"=>$tagDate,"print"=>$geolocItem['print']));
							}else{
								echo '<br>Tag does exist -> we increment numUsed';
								$tagColl->update(array("_id"=> $dataExists['_id']), array('$set'=>array("title"=>$theTag,"location"=>$info['location'],"usageDate"=>$tagDate)));
								$tagColl->update(array("_id"=> $dataExists['_id']), array('$inc'=>array("numUsed"=>1)));
							}
							$tagColl->ensureIndex(array("location"=>"2d"));
							$tagColl->ensureIndex(array("creationDate"=>"1"));
						}else
							echo "<br>WARN : No tag inserted since info is not printed";
					}
					
					// we check if there is another info printed at this point :
					$dataCount = 0;
					// here we take only 30 days of max history
					if($status == 1){
						$dataCount = $infoColl->count(array(
							"location"=>array('$near'=>$info['location'],'$maxDistance'=>0.000035),
							"pubDate"=>array('$gte'=>new MongoDate(gmmktime()-86400*30)),
							"print"=>1,
							"status"=>1	
							)
						); 
						// if more than one info on the same location
						if($dataCount > 0 && $print ==  1){
							$lepas = ceil($dataCount/12);
							$info['location'] = array("lat"=>(0.000015*sin(3.1415*$dataCount/6)+$geolocItem['lat']),"lng"=>(0.00002*cos(3.1415*$dataCount/6)+$geolocItem['lng']));
						}
					}	
					$infoColl->insert($info,array('fsync'=>true));
					$infoColl->ensureIndex(array("location"=>"2d"));
					$infoColl->ensureIndex(array("location"=>"2d","pubDate"=>-1,"yakType"=>1,"print"=>1,"status"=>1));
					$logInfoInserted++;
						
				}else{
					$logInfoAlreadyInDB++;
					echo "<br> The info exists in DB => doing nothing.";    
				}
			}
		}
	
	}
	
	// echo 'Set back Execution Status to 1';
	$feedColl->update(
				array('_id'=>$feed['_id']),
				array('$set'=>array('lastExecStatus'=>1,'lastExecDate'=>new MongoDate(),'lastExecErr'=>''))
			);	
	$log = "<br><br><br><br><br>
	===BACTH SUMMARY : ".$feed['humanName']."====
	<br>Total data parsed : ".$item."
	<br> Total info already in db:".$logInfoAlreadyInDB.".
	<br> Total Info inserted: ".$logInfoInserted.".
	<br> Total place already in db:".$logPlaceAlreadyInDB.".
	<br> Total place inserted: ".$logPlaceInserted.".
	<br>Call to gmap:".$logCallToGMap.".
	<br><br><br>";

	echo $log;
	
	
	$batchlogColl->save(
		array(
		"batchName"=>$_SERVER['PHP_SELF'],
		"datePassage"=>new MongoDate(gmmktime()),
		"dateNextPassage"=>new MongoDate(gmmktime()+($feed['parsingFreq']*60)),
		"log"=>$log,
		"status"=>1
	));
	

			
?>